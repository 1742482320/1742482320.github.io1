I"$<h3 id="emmet--网页开发者必备工具">Emmet — 网页开发者必备工具</h3>

<p>Emmet (即之前著名的 Zen Coding) 是一个网页开发者工具，可以大大地提高你的 HTML &amp; CSS 开发效率。</p>

<p>基本上当下大多数文本编辑器可以重用常用的代码块，称为“代码片断”（ snippets ）。代码片断是提高生产效率的好办法，不过所有的实现都有共同的缺陷：要先定义代码片断并且不能实时展开。</p>

<p>Emmet 将代码片断的思想提升到全新的高度：书写类似于 CSS 的表达式，然后实时解析展开。Emmet 是为了HTML/XML 与 CSS 而开发，也最适合用于它们，不过也能与编程语言一块使用。</p>

<h3 id="elements-元素">Elements 元素</h3>

<p>使用元素的名字，比如 div、 p 来生成 HTML 标签。 Emmet 没有预定义标签集合，所以可以用任意单词来生成对应的标签：div → &lt;div&gt;&lt;/div&gt;, foo → <foo></foo></p>

<h3 id="嵌套操作符">嵌套操作符</h3>

<p>Child: &gt; 子元素</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>div&gt;ul&gt;li

生成：

&lt;div&gt;
    &lt;ul&gt;
        &lt;li&gt;&lt;/li&gt;
    &lt;/ul&gt;
&lt;/div&gt;
</code></pre></div></div>

<p>Sibling: + 兄弟元素</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>div+p+bq

生成：

&lt;div&gt;&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
</code></pre></div></div>

<p>Climb-up: ^ 返回上层</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>div+div&gt;p&gt;span+em^bq

生成：

&lt;div&gt;&lt;/div&gt;
&lt;div&gt;
    &lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;em&gt;&lt;/em&gt;&lt;/p&gt;
    &lt;blockquote&gt;&lt;/blockquote&gt;
&lt;/div&gt;

多个^连写将向上一层层返回：

div+div&gt;p&gt;span+em^^^bq

生成：

&lt;div&gt;&lt;/div&gt;
&lt;div&gt;
    &lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;em&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;

</code></pre></div></div>

<p>Multiplication: * 乘法</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ul&gt;li*5

生成：

&lt;ul&gt;
    &lt;li&gt;&lt;/li&gt;
    &lt;li&gt;&lt;/li&gt;
    &lt;li&gt;&lt;/li&gt;
    &lt;li&gt;&lt;/li&gt;
    &lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
</code></pre></div></div>

<p>Grouping: () 分组</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>div&gt;(header&gt;ul&gt;li*2&gt;a)+footer&gt;p

生成：

&lt;div&gt;
    &lt;header&gt;
        &lt;ul&gt;
            &lt;li&gt;&lt;a href=""&gt;&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=""&gt;&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
    &lt;/header&gt;
    &lt;footer&gt;
        &lt;p&gt;&lt;/p&gt;
    &lt;/footer&gt;
&lt;/div&gt;

可以将分组当作 Document Fragments，后续元素将与分组第一个元素同级。

分组嵌套，并且使用 * 操作法：

(div&gt;dl&gt;(dt+dd)*3)+footer&gt;p

生成：

&lt;div&gt;
    &lt;dl&gt;
        &lt;dt&gt;&lt;/dt&gt;
        &lt;dd&gt;&lt;/dd&gt;
        &lt;dt&gt;&lt;/dt&gt;
        &lt;dd&gt;&lt;/dd&gt;
        &lt;dt&gt;&lt;/dt&gt;
        &lt;dd&gt;&lt;/dd&gt;
    &lt;/dl&gt;
&lt;/div&gt;
&lt;footer&gt;
    &lt;p&gt;&lt;/p&gt;
&lt;/footer&gt;
</code></pre></div></div>

<p>使用分组后，可以用一个缩写来生成整个页面，不过不要这么做。</p>

<h3 id="attribute-operators-属性操作符">Attribute operators 属性操作符</h3>

<p>ID and CLASS</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Emmet 使用类似于 CSS 选择器的语法给元素添加属性：

div#header+div.page+div#footer.class1.class2.class3

生成：

&lt;div id="header"&gt;&lt;/div&gt;
&lt;div class="page"&gt;&lt;/div&gt;
&lt;div id="footer" class="class1 class2 class3"&gt;&lt;/div&gt;
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Custom attributes 自定义属性：

td[title="Hello world!" colspan=3]

生成：

&lt;td title="Hello world!" colspan="3"&gt;&lt;/td&gt;

注：
1.方括号内属性数量不限。
2.没有指定值的属性将生成插入占位（需要编辑器支持）。
3.属性值使用单引号或双引号。
4.属性值如果不包含空格可以省略引号。
</code></pre></div></div>

<p>Item numbering: $ 编号</p>

<ul>
  <li>操作符可以生成重复元素，而 $ 可以对元素编号。将 $ 放在元素名、属性名或属性值中：</li>
</ul>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ul&gt;li.item$*5

生成：

&lt;ul&gt;
    &lt;li class="item1"&gt;&lt;/li&gt;
    &lt;li class="item2"&gt;&lt;/li&gt;
    &lt;li class="item3"&gt;&lt;/li&gt;
    &lt;li class="item4"&gt;&lt;/li&gt;
    &lt;li class="item5"&gt;&lt;/li&gt;
&lt;/ul&gt;
</code></pre></div></div>

<p>多个连写的 $ 可以生成带有前导零的编号：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ul&gt;li.item$$$*5

生成：

&lt;ul&gt;
    &lt;li class="item001"&gt;&lt;/li&gt;
    &lt;li class="item002"&gt;&lt;/li&gt;
    &lt;li class="item003"&gt;&lt;/li&gt;
    &lt;li class="item004"&gt;&lt;/li&gt;
    &lt;li class="item005"&gt;&lt;/li&gt;
&lt;/ul&gt;
</code></pre></div></div>

<p>使用 @ 修饰符，可以改变编号的方向（升序或降序）及起点。</p>

<p>例如改变方向，将 @- 放在 $ 后：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ul&gt;li.item$@-*5

生成：

&lt;ul&gt;
    &lt;li class="item5"&gt;&lt;/li&gt;
    &lt;li class="item4"&gt;&lt;/li&gt;
    &lt;li class="item3"&gt;&lt;/li&gt;
    &lt;li class="item2"&gt;&lt;/li&gt;
    &lt;li class="item1"&gt;&lt;/li&gt;
&lt;/ul&gt;
</code></pre></div></div>

<p>改变起点，将 @N 放在 $ 后：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ul&gt;li.item$@3*5

生成：

&lt;ul&gt;
    &lt;li class="item3"&gt;&lt;/li&gt;
    &lt;li class="item4"&gt;&lt;/li&gt;
    &lt;li class="item5"&gt;&lt;/li&gt;
    &lt;li class="item6"&gt;&lt;/li&gt;
    &lt;li class="item7"&gt;&lt;/li&gt;
&lt;/ul&gt;
</code></pre></div></div>

<p>混合使用这几种修饰符：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ul&gt;li.item$@-3*5

生成：

&lt;ul&gt;
    &lt;li class="item7"&gt;&lt;/li&gt;
    &lt;li class="item6"&gt;&lt;/li&gt;
    &lt;li class="item5"&gt;&lt;/li&gt;
    &lt;li class="item4"&gt;&lt;/li&gt;
    &lt;li class="item3"&gt;&lt;/li&gt;
&lt;/ul&gt;
</code></pre></div></div>

<h3 id="text--文本">Text: {} 文本</h3>

<p>使用大括号为元素添加文本</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a{Click me}

生成：

&lt;a href=""&gt;Click me&lt;/a&gt;
</code></pre></div></div>

<p>注意 {text} 类似于独立元素（比如div, p），不过当它紧跟在元素后面时有特别的意义。比如 a{click} 与 a&gt;{click} 结果一样，而 a{click}+b{here} 与 a&gt;{click}+b{here} 结果不一样：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;!-- a{click}+b{here} --&gt;
&lt;a href=""&gt;click&lt;/a&gt;&lt;b&gt;here&lt;/b&gt;

&lt;!-- a&gt;{click}+b{here} --&gt;
&lt;a href=""&gt;click&lt;b&gt;here&lt;/b&gt;&lt;/a&gt;
</code></pre></div></div>

<p>第二个例子里 <b> 位于 <a> 内。这便是不同点： 当 {text} 紧跟在元素后面时，它没有改变父元素的上下文。下面用一个复杂例子来说明：</a></b></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>p&gt;{Click }+a{here}+{ to continue}

生成：

&lt;p&gt;Click &lt;a href=""&gt;here&lt;/a&gt; to continue&lt;/p&gt;
</code></pre></div></div>

<p>在这个例子中，为了让 &lt;p&gt; 包含 Click here to continue，p 后面使用了 &gt; 以进入子级结构，而 a 只需要包含文本 here，不用改变父元素上下文，所以不需要这样做。</p>

<p>下面不用 &gt; 做下对比：</p>

<p>p{Click }+a{here}+{ to continue}</p>

<p>生成：</p>

<p>Click </p>
<p><a href="">here</a> to continue</p>

<h3 id="notes-on-abbreviation-formatting-格式化缩写注意事项">Notes on abbreviation formatting 格式化缩写注意事项</h3>

<p>当熟悉 Emmet 的缩写语法后，你可能为了可读性而去格式化缩写。比如在元素与操作符之间插入空格：</p>

<p>但是这时 Emmet 失效，因为 Emmet 遇到空格后停止解析缩写。</p>

<p>许多用户错误地认为缩写应该新起一行，但是这是错的：可以在文本的任意位置书写并展开缩写。</p>

<p>这便是为什么 Emmet 需要指示符（比如空格）来停止解析缩写。如果你仍然认为对于复杂的缩写，为了可读性必须格式化：</p>

<ol>
  <li>缩写不是模板语言，不需要可读性，即写即用。</li>
  <li>你真的没必要书写复杂的缩写。停止这样的认识：书写是网页开发中最慢的过程。你将很快发现书写一个复杂的缩写比起使用多个简短缩写，要慢得多并且容易出错。</li>
</ol>
:ET