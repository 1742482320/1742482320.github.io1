I"<h3 id="jsx是什么">JSX是什么</h3>

<p>JSX是一种像下面这样的语法：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>const element = &lt;h1&gt;Hello, world!&lt;/h1&gt;;
</code></pre></div></div>

<p>它是一种JavaScript语法扩展，在React中可以方便地用来描述UI。</p>

<p>本质上，JSX为我们提供了创建React元素方法 <code>（React.createElement(component, props, ...children)）</code>的语法。上面的代码实质上等价于：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var element = React.createElement(
  "h1",
  null,
  "Hello, world!"
);
</code></pre></div></div>

<h3 id="jsx代表js对象">JSX代表JS对象</h3>

<p>JSX本身也是一个表达式，在编译后，JSX表达式会变成普通的JavaScript对象。</p>

<p>你可以在if语句或for循环中使用JSX，你可以将它赋值给变量，你可以将它作为参数接收，你也可以在函数中返回JSX。</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>function getGreeting(user) {
  if (user) {
    return &lt;h1&gt;Hello, {formatName(user)}!&lt;/h1&gt;;
  }
  return &lt;h1&gt;Hello, Stranger.&lt;/h1&gt;;
}
</code></pre></div></div>

<p>经过babel会变成下面的js代码：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>function test(user) {
    if (user) {
        return React.createElement(
            "h1",
            null,
            "Hello, ",
            formatStr(user),
            "!"
        );
    }
    return React.createElement(
        "h1",
        null,
        "Hello, Stranger."
    );
}
</code></pre></div></div>

<p>###　在JSX中使用JavaScript表达式</p>

<p>在JSX中插入JavaScript表达式十分简单，直接在JSX中将JS表达式用大括号括起来即可。例如：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>function formatName(user) {
  return user.firstName + ' ' + user.lastName;
}

const user = {
  firstName: 'Harper',
  lastName: 'Perez'
};

const element = (
  &lt;h1&gt;
    Hello, {formatName(user)}!
  &lt;/h1&gt;
);

ReactDOM.render(
  element,
  document.getElementById('root')
);
</code></pre></div></div>

<p>上面的代码中用到了函数调用表达式fromatName(user)。</p>

<p>在JavaScript中，表达式就是一个短语，Javascript解释器会将其计算出一个结果，常量就是最简单的一类表达式。常用的表达式有：</p>

<blockquote>
  <p>变量名；
函数定义表达式；
属性访问表达式；
函数调用表达式；
算数表达式；
关系表达式；
逻辑表达式；</p>
</blockquote>

<p>需要注意的是，if语句以及for循环不是JavaScript表达式，不能直接作为表达式写在{}中，但可以先将其赋值给一个变量</p>

<p>需要注意的是，if语句以及for循环不是JavaScript表达式，不能直接作为表达式写在{}中，但可以先将其赋值给一个变量（变量是一个JavaScript表达式）:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>function NumberDescriber(props) {
  let description;
  if (props.number % 2 == 0) {
    description = &lt;strong&gt;even&lt;/strong&gt;;
  } else {
    description = &lt;i&gt;odd&lt;/i&gt;;
  }
  return &lt;div&gt;{props.number} is an {description} number&lt;/div&gt;;
}
</code></pre></div></div>

<h3 id="jsx属性值">JSX属性值</h3>

<p>你可以使用引号将字符串字面量指定为属性值：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>const element = &lt;div tabIndex="0"&gt;&lt;/div&gt;;
</code></pre></div></div>

<p>注意这里的”0”是一个字符串字面量。</p>

<p>或者你可以将一个JavaScript表达式嵌在一个大括号中作为属性值：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cont element = &lt;img src={user.avatarUrl}&gt;&lt;/img&gt;;
</code></pre></div></div>

<p>这里用到的是JavaScript属性访问表达式，上面的代码将编译为：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>const element = React.createElement("img", { src: user.avatarUrl });
</code></pre></div></div>

<h3 id="jsx的children">JSX的Children</h3>

<p>首先JSX可以是一个不包含Children的empty tag。如：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>const element = &lt;img src={user.avatarUrl} /&gt;;
</code></pre></div></div>

<p>JSX也可以像HTML标签一样包含Children：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>const element = (
  &lt;div&gt;
    &lt;h1&gt;Hello!&lt;/h1&gt;
    &lt;h2&gt;Good to see you here.&lt;/h2&gt;
  &lt;/div&gt;
);
</code></pre></div></div>

<p>这种写法在生成React元素的时候给我们带来了很大的便利，而且能够更加直观地描述UI。不然我们需要像下面这样创建和上面代码等价的React元素：</p>

<p>const element = React.createElement(
  “div”,
  null,
  React.createElement(
    “h1”,
    null,
    “Hello!”
  ),
  React.createElement(
    “h2”,
    null,
    “Good to see you here.”
  )
);</p>

<p><strong>tip: React DOM结点使用骆驼拼写法给属性命名</strong></p>

<p>例如：class在JSX中应写作className，tabindex应写作tabIndex。</p>

<p>另外关于JSX的children需要注意的是:</p>

<p>React自定义组件的chilren是不会像固有的HTML标签的子元素那样自动render的，我们看下面的例子：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>代码1
class Test extends React.Component {
    render() {
      return (
        &lt;div&gt;
          Here is a list:
          &lt;ul&gt;
            &lt;li&gt;Item 1&lt;/li&gt;
            &lt;li&gt;Item 2&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      ) 
    }
};
ReactDOM.render(
    &lt;Test /&gt;,
    document.getElementById('test')
);
</code></pre></div></div>
:ET